{"version":3,"sources":["component/Header.js","component/weather.js","component/App.js","serviceWorker.js","index.js"],"names":["Header","hendelTempeture","useState","city","setCity","className","value","onChange","e","target","onClick","preventDefault","console","log","fetch","method","body","JSON","stringify","headers","then","responce","json","tempeture","temp","toString","aria-label","role","Weather","weather_icon","App","React","setTemp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wJAqCeA,MAlCf,YAAmC,IAAlBC,EAAiB,EAAjBA,gBAAiB,EACTC,mBAAS,IADA,mBACvBC,EADuB,KAClBC,EADkB,KAoB9B,OACI,yBAAKC,UAAU,UACX,uBAAGA,UAAU,QAAb,oFACA,yBAAKA,UAAU,cAEX,8BACI,2BAAOA,UAAU,aAAaC,MAAOH,EAAMI,SAAU,SAACC,GAAKJ,EAAQI,EAAEC,OAAOH,UAC5E,4BAAQD,UAAU,iBAAiBK,QAxBnD,SAAgBF,GACZA,EAAEG,iBACFC,QAAQC,IAAIV,GACZW,MAAM,mCAAmC,CACrCC,OAAO,OACPC,KAAKC,KAAKC,UAAU,CAACf,KAAKA,IAC1BgB,QAAQ,CACJ,eAAe,sBAGtBC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAC,GACFT,QAAQC,IAAIQ,GACZ,IAAIE,EAAYF,EAASG,KAAKC,WAC9BxB,EAAgBsB,EAAUpB,QAUkC,0BAAOuB,aAAW,SAASC,KAAK,OAAhC,qBCdzDC,MAbf,YAA8B,IAAZJ,EAAW,EAAXA,KAAKrB,EAAM,EAANA,KACb0B,EAAa,CACf,eACA,qBACA,gBAEJ,OACI,yBAAKxB,UAAU,WACX,4BAAKmB,EAAK,oFAAiBrB,EAAjB,OAA2BqB,EAA3B,UAAqCA,EAAK,GAAIK,EAAa,GAAIL,EAAK,GAAIK,EAAa,GAAGA,EAAa,IAAK,kJCSjHC,MAff,WAAgB,IAAD,EACUC,IAAM7B,SAAS,IADzB,mBACNsB,EADM,KACDQ,EADC,OAEUD,IAAM7B,SAAS,IAFzB,mBAENC,EAFM,KAEDC,EAFC,KAOb,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAQJ,gBANZ,SAAyBuB,EAAKrB,GAC5B6B,EAAQR,GACRpB,EAAQD,MAKN,kBAAC,EAAD,CAASqB,KAAMA,EAAMrB,KAAMA,MCHb8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.d8e58d87.chunk.js","sourcesContent":["import React,{useState} from \"react\";\r\n\r\n\r\nfunction Header({hendelTempeture}){\r\n    const [city,setCity]=useState('');\r\n    \r\n    function search(e){\r\n        e.preventDefault()\r\n        console.log(city);\r\n        fetch(`http://localhost:4000/getWeather`,{\r\n            method:\"POST\",\r\n            body:JSON.stringify({city:city}),\r\n            headers:{\r\n                \"Content-type\":\"application/json\"\r\n            }\r\n        })\r\n        .then(responce=>responce.json())\r\n        .then(responce=>{\r\n            console.log(responce);\r\n            let tempeture = responce.temp.toString();\r\n            hendelTempeture(tempeture,city)\r\n        })\r\n    }\r\n    return(\r\n        <div className=\"header\">\r\n            <p className=\"town\">–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ä–æ–¥!</p>\r\n            <div className=\"input-town\">\r\n            \r\n                <form>                    \r\n                    <input className=\"input-city\" value={city} onChange={(e)=>{setCity(e.target.value)}} />\r\n                    <button className=\"search-buttons\" onClick={search}><span  aria-label=\"search\" role=\"img\">üîç</span></button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\n\r\n\r\nfunction Weather({temp,city}){\r\n    const weather_icon=[\r\n        \"‚òÄÔ∏è\",\r\n        \"üå•Ô∏è\",\r\n        \"üßä\"\r\n    ]\r\n    return (\r\n        <div className=\"weather\">\r\n            <h1>{temp?`–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ ${city} = `+temp+ `${(temp>20)?weather_icon[0]:(temp>10)?weather_icon[1]:weather_icon[2]}`:\"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥–æ—Ä–æ–¥\"}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather","import React from 'react';\nimport Header from './Header';\nimport Weather from './weather';\n\n\nfunction App() {\n  const [temp,setTemp] = React.useState(\"\");\n  const [city,setCity] = React.useState(\"\")\n  function hendelTempeture(temp,city){\n    setTemp(temp);\n    setCity(city)\n  }\n  return (\n    <div className=\"App\">\n      <Header hendelTempeture={hendelTempeture}></Header>\n      <Weather temp={temp} city={city}></Weather>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}